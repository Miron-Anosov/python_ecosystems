# Листинг 14.9 Использование объекта CustomFuture в цикле.
from l_14_8 import CustomFuture

future = CustomFuture()

i = 0  # Используем для симуляции длительного процесса

while True:
    try:
        print('Проверяем объект future')
        gen = future.__await__()  # Возвращаем итерируемый объект future(генератор)
        print('gen.send(None)', gen.send(None))  # Вызываем __await__
        print('Объект future не готов.')
        if i == 1:
            print('Передаем значение для объекта future')
            future.set_result('Объект передан во future!')
        i = i + 1
    except StopIteration as si:
        print(f'Значение ошибки: {si.value}')
        break

"""
Здесь мы создали объект `CustomFuture` и в цикле вызываем его метод `__await__`, после чего пытаемся продвинуть 
итератор. Если будущий объект готов, то будет возбуждено исключение `StopIteration`, содержащее его значение. 
В противном случае итератор просто вернет сам будущий объект, и мы перейдем к следующей итерации. 
В нашем примере значение устанавливается на третьей итерации. Этот пример лишь показывает, как нужно рассуждать 
об объектах, допускающих ожидание. На практике мы не стали бы писать такой код, поскольку обычно значение будущего 
объекта устанавливается где-то в другом месте. Далее мы сделаем нечто более полезное, 
воспользовавшись сокетами и модулем `selectors`.
"""